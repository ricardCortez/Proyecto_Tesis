@routes_blueprint.route('/start/laboratorio', methods=['GET', 'POST'])
def start_laboratorio():

        cap = cv2.VideoCapture(0)
        ret = True
        recognized_users = set()
        frame = None  # Variable frame inicializada fuera del bucle

        # Crear el reconocedor de rostros LBPH
        face_recognizer = cv2.face.LBPHFaceRecognizer_create()
        face_recognizer.read('static/modelo_LBPHFace.xml')

        # Cargar el clasificador de detección de rostros
        faceClassif = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

        dataPath = 'static/faces'  # Cambia a la ruta donde hayas almacenado Data
        imagePaths = os.listdir(dataPath)
        print('imagePaths=', imagePaths)

        section_id = request.form['section_name']
        section_name = get_section_name(section_id)
        numero_cubiculo = request.form['numero_cubiculo']

        while ret:
            ret, frame = cap.read()

            if not ret:
                flash('Error capturing video from the camera.', 'error')
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            auxFrame = gray.copy()

            faces = faceClassif.detectMultiScale(gray, 1.3, 5)

            for (x, y, w, h) in faces:
                rostro = auxFrame[y:y + h, x:x + w]
                rostro = cv2.resize(rostro, (150, 150), interpolation=cv2.INTER_CUBIC)
                result = face_recognizer.predict(rostro)

                confidence = 0  # Valor predeterminado de confianza

                if result[1] < 70:
                    identified_person = imagePaths[result[0]]  # Nombre del usuario identificado
                    recognized_users.add(identified_person)
                    confidence = round((1 - (result[1] / 100)) * 100 * 1.5, 2)  # Calcular la confianza como porcentaje
                    label_text = '{}'.format(identified_person, confidence)
                    cv2.putText(frame, label_text, (x, y - 25), 2, 1.1, (0, 255, 0), 1, cv2.LINE_AA)
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

                    # Agregar asistencia del alumno a la tabla "asistencia"
                    codigo_alumno = get_code_from_db(identified_person)
                    nombre = get_name_from_db(identified_person)
                    if codigo_alumno:
                        # Verificar si el alumno ya tiene un registro de asistencia para la fecha actual en asistencia laboratorio
                        today = date.today()
                        existing_attendance_lab = db.session.query(AsistenciaLaboratorio).join(Usuario).filter(
                            Usuario.codigo_alumno == codigo_alumno, AsistenciaLaboratorio.fecha == today).first()
                        if existing_attendance_lab:
                            logging.info(f"El alumno {identified_person} ya tiene un registro de asistencia para hoy en asistencia laboratorio.")
                        else:
                            # Agregar el registro de asistencia en asistencia laboratorio solo si no existe uno para la fecha actual
                            add_attendance_laboratorio(numero_cubiculo, codigo_alumno, section_id)
                    else:
                        logging.error(f"No se encontró el código de alumno para el nombre: {identified_person}")
                else:
                    cv2.putText(frame, 'Desconocido', (x, y - 20), 2, 0.8, (0, 0, 255), 1, cv2.LINE_AA)
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
                    #show_alert(frame)  # Mostrar la alerta en la ventana

                # Ocultar los valores de predicción
                cv2.rectangle(frame, (x, y + h), (x + w, y + h + 40), (0, 0, 0),
                              -1)  # Rectángulo negro para ocultar el texto
                cv2.putText(frame, 'Confianza: {}%'.format(confidence), (x, y + h + 25), cv2.FONT_HERSHEY_SIMPLEX, 0.9,
                            (255, 255, 0), 2)  # Mostrar solo el texto de la confianza en amarillo

            cv2.imshow('Asistencia', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()

        if frame is not None:
            cv2.putText(frame, 'Captura de video finalizada', (30, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        numero_cubiculo, codigo_alumno, hora, *_ = extract_attendance_from_db()

        logging.info("Datos de asistencia obtenidos de la base de datos (asistencia laboratorio):")
        for m, c, h in zip(numero_cubiculo, codigo_alumno, hora):
            logging.info(f"Codigo: {m}, Hora: {c}, Numero de cubiculo: {h}")

        if request.method == "POST":  # Si la solicitud es AJAX
            return render_template('attendance_laboratorio.html', codigo_alumno=codigo_alumno,
                                   numero_cubiculo=numero_cubiculo, hora=hora, datetoday2=datetoday2, url=request.url)
        return render_template('panel_docente.html')
        #return redirect(url_for('routes.panel_docente'))